"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _react = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const ReactNativeInactivity = ({
  timeForInactivity = 2000,
  isActive = true,
  children,
  onInactive,
  loop = true,
  restartTimerOnActivityAfterExpiration = false,
  style
}) => {
  /*
   * Using useRef to hold setTimeout. If it's null then it means that the timer is expired/stopped.
   */
  const timerRef = (0, _react.useRef)(null);
  /*
   * Sometimes, we need to determine whether it's the first render or not.
   * This is why we use useRef for this purpose.
   */
  const isFirstRender = (0, _react.useRef)(true);
  /*
   * We'll use this to call onInactive.
   */
  const [isInactivityTimeCompleted, setIsInactivityTimeCompleted] = (0, _react.useState)(false);
  /*
   * Use to stop timer.
   */
  const stopTimer = (0, _react.useCallback)(() => {
    if (timerRef.current) clearTimeout(timerRef.current);
    timerRef.current = null;
  }, []);
  /*
   * This method will be called whenever we start/reset our timer or detect any touches.
   */
  const resetTimer = (0, _react.useCallback)(() => {
    stopTimer();
    timerRef.current = setTimeout(() => setIsInactivityTimeCompleted(true), timeForInactivity);
  }, [timeForInactivity]);
  /*
   * In order not to steal any touches from the children components, this method
   * must return false.
   */
  const resetTimerForPanResponder = (0, _react.useCallback)(() => {
    /*
     * If user don't want to restart timer if he/she interacts with the app after
     * the view is considered inactive and also loop is false then we simple want
     * to return from the function and will not restart/reset the timer
     */
    if (!loop && !restartTimerOnActivityAfterExpiration && timerRef.current === null) return false;
    resetTimer();
    return false;
  }, [loop, restartTimerOnActivityAfterExpiration, timeForInactivity]);
  /*
   * PanResponder will never be updated
   */
  const panResponder = (0, _react.useMemo)(() => _reactNative.PanResponder.create({
    onStartShouldSetPanResponderCapture: resetTimerForPanResponder,
    onMoveShouldSetPanResponderCapture: resetTimerForPanResponder,
    onPanResponderTerminationRequest: resetTimerForPanResponder
  }), [loop, restartTimerOnActivityAfterExpiration, timeForInactivity]);
  /*
   * When inactivity time is complete, calling onInactive and based on loop managing the timer again.
   */
  (0, _react.useEffect)(() => {
    if (!isInactivityTimeCompleted) return;
    onInactive();
    if (loop) resetTimer();else stopTimer();
    setIsInactivityTimeCompleted(false);
  }, [isInactivityTimeCompleted, onInactive]);
  /*
   * Managing the timer based on isActive.
   */
  (0, _react.useEffect)(() => {
    if (isActive) resetTimer();else stopTimer();
  }, [isActive]);
  /*
   * Handling if timer is expired and isActive is true and then loop
   * turns to true then we may need this behaviour to turn onn the timer.
   */
  (0, _react.useEffect)(() => {
    if (isFirstRender.current || timerRef.current != null || !loop || !isActive) return;
    resetTimer();
  }, [loop]);
  /*
   * Handling if timeForInactivity changes and isActive is true
   * then we need to reset/restart the timer.
   */
  (0, _react.useEffect)(() => {
    if (isFirstRender.current || !isActive) return;
    resetTimer();
  }, [timeForInactivity]);
  /*
   * Performing cleanup and setting isFirstRender to false. This hook will must be in last.
   */
  (0, _react.useEffect)(() => {
    isFirstRender.current = false;
    return () => stopTimer();
  }, []);
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, _extends({
    style: [styles.containerStyle, style],
    collapsable: false
  }, isActive ? panResponder.panHandlers : null), children);
};
var _default = exports.default = ReactNativeInactivity;
const styles = _reactNative.StyleSheet.create({
  containerStyle: {
    flex: 1
  }
});
//# sourceMappingURL=index.js.map