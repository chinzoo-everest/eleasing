import { type StyleProp, type ViewStyle } from "react-native";
import React from "react";
interface ReactNativeInactivityProps {
    /**
     * Number of milliseconds after which the view is considered inactive.
     * If timeForInactivity changes, the timer will be reset/restart.
     * It defaults to `2000`.
     */
    timeForInactivity?: number;
    /**
     * This is used to toggle the timer on or off.
     * When set to `false`, the timer will stop, and the onInactive callback will never be called.
     * When set to `true`, the timer will be reset, restarted,
     * and after expiration, onInactive will be called.
     * It defaults to `true`.
     */
    isActive?: boolean;
    /**
     * Children components to embed inside ReactNativeInactivity's View. If the
     * user does not press the children component for timeForInactivity ms
     * and the timer is active, we will call the onInactive callback.
     */
    children: React.ReactNode;
    /**
     * Callback will trigger when ReactNativeInactivity's View isn't touched for more than
     * `timeForInactivity` milliseconds.
     * This function will only be called once every time after the timer expires.
     */
    onInactive: () => void;
    /**
     * If set to `false` then the timer will not restart automatically
     * after the view is considered inactive.
     * If the value changes from `false` to `true` and the timer is expired
     * and isActive is `true`, timer will reset/restart.
     * It defaults to `true`.
     */
    loop?: boolean;
    /**
     * If set to `true`, the timer will restart when the user presses the
     * ReactNativeInactivity's View after it becomes inactive.
     * It will only work if the `loop` prop is set to `false`.
     * It defaults to `false`.
     */
    restartTimerOnActivityAfterExpiration?: boolean;
    /**
     * Optional custom style for ReactNativeInactivity's View.
     * It defaults to `{ flex: 1 }`.
     */
    style?: StyleProp<ViewStyle>;
}
declare const ReactNativeInactivity: ({ timeForInactivity, isActive, children, onInactive, loop, restartTimerOnActivityAfterExpiration, style, }: ReactNativeInactivityProps) => React.JSX.Element;
export default ReactNativeInactivity;
//# sourceMappingURL=index.d.ts.map